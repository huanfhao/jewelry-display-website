generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PerformanceMetric {
  id        String   @id
  name      String
  value     Float
  label     String?
  page      String?
  createdAt DateTime @default(now())

  @@map("performance_metrics")
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  image       String
  price       Float?
  slug        String   @unique
  category    String?
  stock       Int      @default(0)
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

model ErrorLog {
  id             String   @id @default(cuid())
  message        String
  stack          String?
  componentStack String?
  url            String?
  userAgent      String?
  timestamp      DateTime @default(now())

  @@map("error_logs")
}

model BlogPost {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String     @db.Text
  excerpt     String?
  coverImage  String?
  published   Boolean    @default(false)
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categories  Category[]
  tags        Tag[]
  comments    Comment[]

  @@map("blog_posts")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  posts       BlogPost[]

  @@map("categories")
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  posts     BlogPost[]

  @@map("tags")
}

model BlogPostToCategory {
  A String
  B String

  @@id([A, B], map: "_BlogPostToCategory_AB_pkey")
  @@index([B], map: "_BlogPostToCategory_B_index")
  @@map("_BlogPostToCategory")
}

model BlogPostToTag {
  A String
  B String

  @@id([A, B], map: "_BlogPostToTag_AB_pkey")
  @@index([B], map: "_BlogPostToTag_B_index")
  @@map("_BlogPostToTag")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  author    String
  email     String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
  @@index([postId])
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}
